name: CI - Pre-Commit with GitHub Token

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    steps:
    # 1. Checkout the code using GitHub token
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    # 2. Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    # 3. Install dependencies
    - name: Install dependencies
      run: |
        echo "Starting to install dependencies..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt || { echo "Dependency installation failed."; exit 1; }

    # 4. Configure Git to use GITHUB_TOKEN for authentication in pre-commit
    - name: Configure Git for GITHUB_TOKEN
      run: |
        echo "Configuring Git to use GITHUB_TOKEN..."
        git config --global url."https://${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
        git config --global credential.helper store
        git config --list

    # 5. Install Pre-Commit
    - name: Install Pre-Commit
      run: |
        echo "Installing pre-commit hooks..."
        pre-commit install || { echo "Pre-commit installation failed."; exit 1; }

    # 6. Run Pre-Commit Hooks with detailed logging
    - name: Run Pre-Commit Hooks
      run: |
        echo "Running pre-commit hooks..."
        pre-commit run --all-files --show-diff-on-failure --verbose || { echo "Pre-commit hooks failed."; exit 1; }

    # 7. Debug Pre-Commit Log if it fails
    - name: Debug Pre-Commit Log
      if: failure()
      run: |
        echo "Pre-commit failed, checking log..."
        cat /home/runner/.cache/pre-commit/pre-commit.log || echo "No pre-commit log found."

    # 8. Run unit tests
    - name: Run Tests
      run: |
        echo "Running tests..."
        pytest tests/ --disable-warnings || { echo "Tests failed."; exit 1; }

    # 9. Run coverage report
    - name: Run Coverage
      run: |
        echo "Running coverage report..."
        coverage run -m pytest || { echo "Coverage run failed."; exit 1; }
        coverage report || { echo "Coverage report failed."; exit 1; }

    # 10. Analyze code complexity using Radon
    - name: Analyze Code Complexity (Radon)
      run: |
        echo "Analyzing code complexity using Radon..."
        radon cc src/ -s -n C || { echo "Cyclomatic complexity check failed."; exit 1; }
        radon mi src/ || { echo "Maintainability index check failed."; exit 1; }

    # 11. Check the final file structure after execution for any anomalies
    - name: Check File Structure After Execution
      run: |
        echo "Final file structure after job execution:"
        ls -R
        echo "Job completed."
