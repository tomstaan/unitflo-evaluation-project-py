name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    # Using a custom Docker container with an updated libcrypto version
    container:
      image: ubuntu:20.04  # Use Ubuntu 20.04 to ensure compatibility with libcrypto

    steps:
    # Step 1: Checkout the repository
    - uses: actions/checkout@v3

    # Step 2: Install OpenSSL and SSH client to ensure the correct version of libcrypto
    - name: Install Dependencies
      run: |
        apt-get update
        apt-get install -y openssl openssh-client

    # Step 3: Write the SSH private key to the ~/.ssh directory and set correct permissions
    - name: Write SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ls -la ~/.ssh  # Debugging: List files in ~/.ssh to verify

    # Step 4: Add the SSH key to the ssh-agent and check if the key is loaded properly
    - name: Add SSH Key to Agent
      run: |
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_ed25519
        ssh-add -l  # List loaded keys to confirm the SSH key was added

    # Step 5: Verify SSH key (optional, remove after debugging)
    - name: Verify SSH Key
      run: |
        ssh-keygen -y -f ~/.ssh/id_ed25519  # Check if the key can generate the public key

    # Step 6: Cache Pre-Commit Environments to avoid repeated setup
    - name: Cache Pre-Commit Environments
      uses: actions/cache@v2
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pre-commit-

    # Step 7: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    # Step 8: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Step 9: Install Pre-Commit and run hooks
    - name: Install Pre-Commit and Run Hooks
      run: |
        pre-commit install
        pre-commit run --all-files

    # Step 10: Debugging step: Display Pre-Commit log on failure
    - name: Display Pre-Commit Log (on failure)
      if: failure()
      run: |
        echo "Displaying pre-commit log..."
        cat precommit_debug.log || echo "No pre-commit log found"

    # Step 11: Run unit tests
    - name: Run Tests
      run: |
        pytest tests/ --disable-warnings

    # Step 12: Run coverage report
    - name: Run Coverage
      run: |
        coverage run -m pytest
        coverage report

    # Step 13: Analyze code complexity using Radon
    - name: Analyze Code Complexity (Radon)
      run: |
        radon cc src/ -s -n C  # Check cyclomatic complexity for grades A, B, C
        radon mi src/  # Measure maintainability index
